import Head from "next/head";
import Image from "next/image";
import Link from "next/Link";
import { useEffect, useState } from "react";
import { CreateController } from "../../../api/controluser";
import { useRouter } from "next/router";
import imageCompression from "browser-image-compression";

export default function ProfileEdit() {
  const router = useRouter();
  const [data, setData] = useState([]);
  const [id, setid] = useState();
  const [first_name, setfirst_name] = useState();
  const [last_name, setlast_name] = useState();
  const [email, setemail] = useState();
  const [phone_number, setphone_number] = useState();
  const [age, setage] = useState(0);
  const [date_of_birth, setdate_of_birth] = useState();
  const [image, setimage] = useState();
  const [is_active, setis_active] = useState(true);
  const [file, setfile] = useState(null);

  //getuser by ID
  const useristbyID = async (id) => {
    const data = await CreateController()
      .GetDataUserbyID({ id })
      .then((response) => {
        setid(response.data.data._id);
        setfirst_name(response.data.data.name.first);
        setlast_name(response.data.data.name.last);
        setemail(response.data.data.email);
        setphone_number(response.data.data.phone_number);
        setage(response.data.data.age);
        setdate_of_birth(response.data.data.date_of_birth);
        setis_active(response.data.data.is_active);
        setimage(response.data.data.image_profile);
        console.log("data TODO List");
      });

    setData(data);
  };

  //compress file
  async function handleImageUpload(file) {
    console.log("originalFile instanceof Blob", file instanceof Blob); // true
    console.log(`originalFile size ${file.size / 1024 / 1024} MB`);
    try {
      const options = {
        maxSizeMB: 1,
        maxWidthOrHeight: 1920,
        useWebWorker: true,
      };
      const compressedFile = await imageCompression(file, options);
      compressedFile.size / 1024 / 1024;
      console.log(
        `compressedFile size ${compressedFile.size / 1024 / 1024} MB`
      ); // smaller than maxSizeMB
    } catch (error) {
      console.log(error);
    }
  }
  //check file type
  async function checkFileType(file) {
    const acceptedTypes = ["image/jpeg", "image/png"];
    const options = {
      maxSizeMB: 1,
      maxWidthOrHeight: 1920,
      useWebWorker: true,
    };
    if (acceptedTypes.includes(file.type)) {
      try {
        handleImageUpload(file);
        console.log("Correct, File is a jpg or png.");
      } catch (error) {
        console.error("Error compressing image:", error);
      }
    } else {
      alert("Please select new image , File is not a jpg or png.");
    }
  }

  //อัปเดตข้อมูล
  const EditItem = async (e) => {
    e.preventDefault();

    const data = {
      id: id,
      first_name: first_name,
      last_name: last_name,
      email: email,
      phone_number: phone_number,
      age: age,
      date_of_birth: date_of_birth,
      is_active: is_active,
      file: file,
    };
    try {
      if (file) {
        checkFileType(file);
        await CreateController().UpdateUser({
          data,
        });
        console.log("User ", data);
        alert("User Edit successfully");
        window.location.replace("/profileuser");
      }
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    if (router.query?.id) {
      useristbyID(router.query?.id);
    }

    console.log(router.query?.id);
  }, [router]);

  return (
    <div className="">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen flex-col  bg-gradient-to-r from-purple-300 to-pink-300">
        {/* start : navbar */}
        <div className="navbar bg-base-100 ">
          <div className="flex-1">
            <a className="btn btn-ghost normal-case text-xl">CRUDNext</a>
          </div>
          <div className="flex-none">
            <div className="mr-5">
              <Link href="/crud">CRUD</Link>
            </div>
            <div className="dropdown dropdown-end">
              <label tabIndex={0} className="btn btn-ghost btn-circle">
                <div className="indicator">
                  <span className="badge badge-sm indicator-item">8</span>
                </div>
              </label>
              <div
                tabIndex={0}
                className="mt-3 card card-compact dropdown-content w-52 bg-base-100 shadow"
              >
                <div className="card-body">
                  <span className="font-bold text-lg">8 Items</span>
                  <span className="text-info">Subtotal: $999</span>
                  <div className="card-actions">
                    <button className="btn btn-primary btn-block">
                      View cart
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <div className="dropdown dropdown-end">
              <label tabIndex={0} className="btn btn-ghost btn-circle avatar">
                <div className="w-10 rounded-full">
                  <img src={image} alt="imgprofile" />
                </div>
              </label>
              <ul
                tabIndex={0}
                className="menu menu-sm dropdown-content mt-3 p-2 shadow bg-base-100 rounded-box w-52"
              >
                <li>
                  <Link href="/profileuser" className="justify-between">
                    Profile
                    <span className="badge">New</span>
                  </Link>
                </li>
                <li>
                  <a>Settings</a>
                </li>
                <li>
                  <Link href="/">Logout</Link>
                </li>
              </ul>
            </div>
          </div>
        </div>
        {/* end : navbar */}
        {/* start : content */}

        <div className="rounded-[10px] bg-white shadow-md lg:ml-16 lg:mr-16 lg:mb-5 lg:mt-16 mt-5 mr-5 ml-5 mb-5 px-[25px] py-[40px] ">
          <div className="grid grid-cols-12 gap-0 mt-5 intro-y">
            <div className="col-span-12 intro-y lg:col-span-6 rounded-md -mt-4">
              <img src={image} alt="imgprofile" />
            </div>

            <div className="col-span-12 lg:col-span-6">
              <div className="text-2xl font-bold text-center">Edit Profile</div>

              <div className="p-3 w-full">
                <div className="rounded-md shadow-md">
                  <form onSubmit={EditItem}>
                    <div className="form-control w-full p-3">
                      <label className="label">
                        <span className="label-text">id</span>
                      </label>
                      <input
                        type="text"
                        placeholder="Type here"
                        className="input input-bordered w-full bg-white"
                        value={id}
                        onChange={(e) => setid(e.target.value)}
                      />
                    </div>

                    <div className="form-control w-full p-3">
                      <label className="label">
                        <span className="label-text">first_name</span>
                      </label>
                      <input
                        type="text"
                        placeholder="Type here"
                        className="input input-bordered w-full bg-white"
                        value={first_name}
                        onChange={(e) => setfirst_name(e.target.value)}
                      />
                    </div>

                    <div className="form-control w-full p-3">
                      <label className="label">
                        <span className="label-text">last_name</span>
                      </label>
                      <input
                        type="text"
                        placeholder="Type here"
                        className="input input-bordered w-full bg-white"
                        value={last_name}
                        onChange={(e) => setlast_name(e.target.value)}
                      />
                    </div>

                    <div className="form-control w-full p-3">
                      <label className="label">
                        <span className="label-text">email</span>
                      </label>
                      <input
                        type="text"
                        placeholder="Type here"
                        className="input input-bordered w-full bg-white"
                        value={email}
                        onChange={(e) => setemail(e.target.value)}
                      />
                    </div>

                    <div className="form-control w-full p-3">
                      <label className="label">
                        <span className="label-text">phone_number</span>
                      </label>
                      <input
                        type="text"
                        placeholder="Type here"
                        className="input input-bordered w-full bg-white"
                        value={phone_number}
                        onChange={(e) => setphone_number(e.target.value)}
                      />
                    </div>

                    <div className="form-control w-full p-3">
                      <label className="label">
                        <span className="label-text">age</span>
                      </label>
                      <input
                        type="number"
                        placeholder="Type here"
                        className="input input-bordered w-full bg-white"
                        value={age}
                        onChange={(e) => setage(e.target.value)}
                      />
                    </div>

                    <div className="form-control w-full p-3">
                      <label className="label">
                        <span className="label-text">date_of_birth</span>
                      </label>
                      <input
                        type="text"
                        placeholder="Type here"
                        className="input input-bordered w-full bg-white"
                        value={date_of_birth}
                        onChange={(e) => setdate_of_birth(e.target.value)}
                      />
                    </div>

                    <div className="form-control w-full p-3">
                      <label className="label">
                        <span className="label-text">Profile image</span>
                      </label>

                      <input
                        type="file"
                        placeholder="Type here"
                        className="input input-bordered w-full bg-white"
                        onChange={(e) => setfile(e.target.files[0])}
                      />
                    </div>

                    <div className="p-3">
                      <button
                        type="submit"
                        className="btn w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white mt-12"
                      >
                        Edit Item
                      </button>
                    </div>
                    <div className="p-3">
                      <Link href="/profileuser">
                        <button
                          type="submit"
                          className="btn w-full bg-gradient-to-r from-gray-500 to-gray-100 text-white mt-12"
                        >
                          Cancel
                        </button>
                      </Link>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>
        {/* end : content */}

        <div className="btm-nav lg:hidden">
          <button>
            <span className="btm-nav-label">Home</span>
          </button>
          <button className="active">
            <span className="btm-nav-label">Warnings</span>
          </button>
          <button>
            <span className="btm-nav-label">logout</span>
          </button>
        </div>
      </main>
    </div>
  );
}
