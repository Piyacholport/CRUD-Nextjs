import Head from "next/head";
import Image from "next/image";
import Link from "next/Link";
import { useEffect, useState } from "react";
import { GetTodoController } from "../../api/gettodo";
import { TodoController } from "../../api/controltodo";

export default function Register() {
  const [data, setData] = useState([]);
  //for get data
  const [listitem, setlistitem] = useState([]);
  const [counttodo, setcounttodo] = useState([]);
  //for add data
  const [tid, setButtonValue] = useState(0);
  const [title, settitle] = useState("");
  const [note, setnote] = useState("");
  const [reminder_date, setreminder_date] = useState("");
  const [reminder_time, setreminder_time] = useState("");
  //for del

  const todolist = async () => {
    const data = await GetTodoController()
      .getDataTodo()
      .then((response) => {
        setButtonValue(response.data.date.tid);
        setlistitem(response.data.date);
        setcounttodo(response.data.date.length);
        console.log("data TODO List");
      });

    setData(data);
  };

  //เพิ่มข้อมูล
  async function AddItem(e) {
    e.preventDefault();

    try {
      await TodoController().Createtodo({
        title,
        note,
        reminder_date,
        reminder_time,
      });
      console.log("Item Add successfully");
      alert("Item Add successfully");
      window.location.reload();
    } catch (error) {
      console.error("Error deleting item:", error.message);
    }
  }
  //ลบข้อมูล
  async function deleteItem(e) {
    console.log(e.target.value);

    try {
      await TodoController().Deletetodo({ tid: e.target.value });
      console.log("Item deleted successfully");
      alert("Item deleted successfully");
      window.location.reload();
    } catch (error) {
      // Handle error
      console.error("Error deleting item:", error.message);
    }
  }

  //ส่งข้อมูลไปหน้าแก้ไข
  async function EditItem(e) {
  
    setButtonValue(e.target.value);
    console.log(tid);
    window.location.replace(`/crud/`+e.target.value);
  }

  useEffect(() => {
    todolist();
  }, []);

  return (
    <div className="">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen flex-col  bg-gradient-to-r from-purple-300 to-pink-300">
        {/* start : navbar */}
        <div className="navbar bg-base-100 ">
          <div className="flex-1">
            <a className="btn btn-ghost normal-case text-xl">CRUDNext</a>
          </div>
          <div className="flex-none">
            <div className="mr-5">
              <Link href="/crud">CRUD</Link>
            </div>
            <div className="dropdown dropdown-end">
              <label tabIndex={0} className="btn btn-ghost btn-circle">
                <div className="indicator">
                  <span className="badge badge-sm indicator-item">8</span>
                </div>
              </label>
              <div
                tabIndex={0}
                className="mt-3 card card-compact dropdown-content w-52 bg-base-100 shadow"
              >
                <div className="card-body">
                  <span className="font-bold text-lg">8 Items</span>
                  <span className="text-info">Subtotal: $999</span>
                  <div className="card-actions">
                    <button className="btn btn-primary btn-block">
                      View cart
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <div className="dropdown dropdown-end">
              <label tabIndex={0} className="btn btn-ghost btn-circle avatar">
                <div className="w-10 rounded-full">
                  <Image
                    src="/user.jpg"
                    alt="Vercel Logo"
                    className="dark:invert"
                    width={100}
                    height={24}
                    priority
                  />
                </div>
              </label>
              <ul
                tabIndex={0}
                className="menu menu-sm dropdown-content mt-3 p-2 shadow bg-base-100 rounded-box w-52"
              >
                <li>
                  <Link href="/profileuser" className="justify-between">
                    Profile
                    <span className="badge">New</span>
                  </Link>
                </li>
                <li>
                  <a>Settings</a>
                </li>
                <li>
                  <Link href="/">Logout</Link>
                </li>
              </ul>
            </div>
          </div>
        </div>
        {/* end : navbar */}
        {/* start : content */}
        <div>{listitem.tid}</div>
        <div className="rounded-[10px] bg-white shadow-md lg:ml-16 lg:mr-16 lg:mb-5 lg:mt-16 mt-5 mr-5 ml-5 mb-5 px-[25px] py-[40px] ">
          <div className="grid grid-cols-12 gap-0 mt-5 intro-y">
            <div className="col-span-12 intro-y lg:col-span-6 rounded-md -mt-4">
              <Image
                src="/pics.jpg"
                alt="Vercel Logo"
                className="dark:invert"
                width={900}
                height={900}
                priority
              />
            </div>

            <div className="col-span-12 lg:col-span-6">
              <div className="text-2xl font-bold text-center">Add Item</div>

              <div className="p-3 w-full">
                <div className="rounded-md shadow-md">
                  <form onSubmit={AddItem}>
                    <div className="form-control w-full p-3">
                      <label className="label">
                        <span className="label-text">title</span>
                      </label>
                      <input
                        type="text"
                        placeholder="Type here"
                        className="input input-bordered w-full bg-white"
                        value={title}
                        onChange={(e) => settitle(e.target.value)}
                      />
                    </div>

                    <div className="form-control w-full p-3">
                      <label className="label">
                        <span className="label-text">note</span>
                      </label>
                      <input
                        type="text"
                        placeholder="Type here"
                        className="input input-bordered w-full bg-white"
                        value={note}
                        onChange={(e) => setnote(e.target.value)}
                      />
                    </div>
                    <div className="form-control w-full p-3">
                      <label className="label">
                        <span className="label-text">reminder_date</span>
                      </label>
                      <input
                        type="date"
                        placeholder="Type here"
                        className="input input-bordered w-full bg-white"
                        value={reminder_date}
                        onChange={(e) => setreminder_date(e.target.value)}
                      />
                    </div>
                    <div className="form-control w-full p-3">
                      <label className="label">
                        <span className="label-text">reminder_time</span>
                      </label>
                      <input
                        type="time"
                        placeholder="Type here"
                        className="input input-bordered w-full bg-white"
                        value={reminder_time}
                        onChange={(e) => setreminder_time(e.target.value)}
                      />
                    </div>

                    <div className="p-3">
                      <button
                        type="submit"
                        className="btn w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white mt-12"
                      >
                        Add Item
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            </div>

            {/* <div className="col-span-12 lg:col-span-6">
              <div className="text-2xl font-bold text-center">Update Todo</div>
              <form>
                <div className="form-control w-full p-3">
                  <label className="label">
                    <span className="label-text">id</span>
                  </label>
                  <input
                    type="text"
                    placeholder="Type here"
                    className="input input-bordered w-full bg-white"
                    // value={tid}
                    // onChange={(e) => settid(e.target.value)}
                  />
                </div>

                <div className="p-3 text-center">
                <Link href="/edittodo"><button
                 
                    className="btn w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white "
                  >
                    Update
                  </button></Link>
                  
                </div>
              </form>
            </div> */}
          </div>
        </div>
        {/* end : content */}

        {/* start : list */}
        <div className="rounded-[10px] bg-white shadow-md lg:ml-16 lg:mr-16 lg:mb-16 lg:mt-5  mr-5 ml-5 mb-24 px-[25px] py-[40px] ">
          <div></div>
          <div className="">
            <div className="font-bold"> List Data = {counttodo}</div>
            <div className="overflow-x-auto">
              <table className="table table-zebra">
                <thead>
                  <tr>
                    <th>ชื่อ </th>
                    <th>บันทึกข้อความ </th>
                    <th>วันที่แจ้งเตือน </th>
                    <th>เวลาแจ้งเตือน </th>
                    <th>วันที่สร้าง </th>
                    <th>วันที่แก้ไข </th>
                  </tr>
                </thead>
                <tbody>
                  {listitem.map((item, index) => (
                    <tr key={index}>
                      <td>{item.title}</td>
                      <td>{item.note}</td>
                      <td>{item.reminder.date}</td>
                      <td>{item.reminder.time}</td>
                      <td>{item.created_at}</td>
                      <td>{item.updated_at}</td>
                      <td>
                        <div className="">
                          <button
                            className="bg-red-500 text-white rounded-md px-2 py-1 mr-2"
                            value={item.tid}
                            onClick={deleteItem}
                          >
                            ลบ
                          </button>

                          <button
                            
                            className="bg-yellow-400 text-white rounded-md px-2 py-1"
                            value={item.tid}
                            onClick={EditItem}
                          >
                            แก้ไข
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
        {/* end : list */}

        <div className="btm-nav lg:hidden">
          <button>
            <span className="btm-nav-label">Home</span>
          </button>
          <button className="active">
            <span className="btm-nav-label">Warnings</span>
          </button>
          <button>
            <span className="btm-nav-label">logout</span>
          </button>
        </div>
      </main>
    </div>
  );
}
